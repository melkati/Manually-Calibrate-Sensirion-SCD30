name: PlatformIO

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
 push:
   branches: [ main ]
 pull_request:
   branches: [ main ]

 # Allows you to run this workflow manually from the Actions tab
 workflow_dispatch:
  
jobs:

  generate-matrix:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - id: set-matrix
        run: |
          pip install platformio
          python tools/generate-matrix.py
          
  build:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ hashFiles('requirements.txt') }}
      - uses: actions/cache@v2
        if: ${{ contains(matrix.env, 'esp32') }}
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-esp32-${{ hashFiles('platformio*.ini') }}
      - uses: actions/cache@v2
        if: ${{ contains(matrix.env, 'esp8266') }}
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-esp8266-${{ hashFiles('platformio*.ini') }}
      - name: Get version
        id: vars
        run: echo ::set-output name=version::$(cat version)
      - name: Show version
        run: echo ${{ steps.vars.outputs.version }}
      - name: Set an output
        id: get-date
        run: echo ::set-output name=date::$(/bin/date -u "+%Y%m%d")
      - name: Use the output
        run: echo 'The output date is ${{ steps.get-date.outputs.date }}'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U platformio
          platformio update
      - name: Build test
        run: |
          pio run
      - uses: actions/upload-artifact@v2
        with:
          name: Calibrate_SCD30_${{ matrix.env }}-v${{ steps.vars.outputs.version }}-${{ steps.get-date.outputs.date }}.bin
          path: .pio/build/esp32dev/firmware.bin
